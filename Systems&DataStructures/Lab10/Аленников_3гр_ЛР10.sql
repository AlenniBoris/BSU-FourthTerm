--1

CREATE PROCEDURE GET_CUST1 AS BEGIN EXECUTE GET_CUST '211'	
END

CREATE PROCEDURE GET_CUST @CustNum char(10) AS BEGIN
SELECT COMPANY, FIO, CITY FROM CUSTOMERS, SALESPERS, OFFICES WHERE COMPANY = ( SELECT DISTINCT COMPANY FROM CUSTOMERS WHERE CUST_NUM = @CustNum) AND FIO = (SELECT FIO FROM SALESPERS WHERE EMPL_NYM = (SELECT CUST_REP FROM CUSTOMERS WHERE CUST_NUM = @CustNum) ) AND CITY = (SELECT CITY FROM OFFICES WHERE CUST_NUM = @CustNum)
END

--2

CREATE PROCEDURE CHK_TOT @CUST_NUM char(10),
@amount MONEY OUTPUT
AS BEGIN 
SELECT @amount = SUM(AMOUNT)
	FROM CUSTOMERS
	WHERE CUST_NUM = @CUST_NUM
IF @amount > 30000
UPDATE OFFICES
SET STATUS = 'большой объем заказов'
WHERE CUST_NUM = @CUST_NUM
	ELSE
UPDATE OFFICES
SET STATUS = 'малый объем заказов'
WHERE CUST_NUM = @CUST_NUM
RETURN
END

--3

CREATE PROCEDURE INSERT_IN_OFFICES @idoff int, @target float, @city char(10), @custNum char(10), @status char(30)
AS
BEGIN
	IF(@custNum IN (SELECT CUST_NUM FROM CUSTOMERS))
	BEGIN
		DECLARE @money MONEY
		EXECUTE CHK_TOT @custNum, @money OUTPUT
		PRINT @money
		IF(@money < 20000)
		BEGIN
			UPDATE SALESPERS SET QUOTA = QUOTA + @target WHERE EMPL_NYM = (SELECT DISTINCT CUST_REP FROM CUSTOMERS WHERE CUST_NUM = @custNum)
			INSERT INTO OFFICES VALUES(@idoff, @target, @city, @custNum,@status)
		END
		ELSE IF(@money = 20000)
		BEGIN
			 (SELECT DISTINCT CUST_REP FROM CUSTOMERS WHERE CUST_NUM = @custNum)
			UPDATE SALESPERS SET QUOTA = QUOTA + @money WHERE EMPL_NYM = (SELECT DISTINCT CUST_REP FROM CUSTOMERS WHERE CUST_NUM = @custNum)
		END
	END
END 

--4

CREATE TRIGGER EMPL_NUM_TRIGGER ON SALESPERS
AFTER
UPDATE AS IF(
        UPDATE(EMPL_NYM)
    ) BEGIN
UPDATE CUSTOMERS
SET CUST_REP = (
        SELECT EMPL_NYM
        FROM INSERTED
    )
WHERE CUST_REP = (
        SELECT EMPL_NYM
        FROM DELETED
    )
END

--5


CREATE TRIGGER CUSTOMERS_INSERT ON CUSTOMERS
AFTER
INSERT,
	UPDATE AS BEGIN IF (
		EXISTS (
			SELECT 0
			FROM INSERTED
		)
	) BEGIN IF(
		(
			SELECT DATEPART(
					DAY,
					(
						SELECT DATA_ORDER
						FROM INSERTED
					)
				)
		) < 16
	) BEGIN ROLLBACK TRANSACTION
END
END
ELSE BEGIN IF(
	(
		SELECT DATEPART(
				DAY,
				(
					SELECT DATA_ORDER
					FROM INSERTED
				)
			)
	) < 16
) BEGIN ROLLBACK TRANSACTION
END
END
END